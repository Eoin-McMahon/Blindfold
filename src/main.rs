use std::path::{Path, PathBuf};
use std::fs::File;
use std::io::prelude::*;
use clap::{Arg, App, SubCommand};
mod lib;
use std::collections::HashMap;
// API endpoint for the gitignore templates repository
const API_URL: &str = "https://api.github.com/repos/toptal/gitignore/contents/templates?ref=master";

fn main() -> std::io::Result<()> {
    
    let matches = App::new("Blindfold")
                    .version("1.0")
                    .author("Eoin McMahon <eoin.mcmahon.dev@gmail.com>")
                    .about("Grabs gitignore templates from gitignore.io")
                    .arg(Arg::with_name("LANGUAGE(S)")
                         .short("l")
                         .long("lang")
                         .takes_value(true)
                         .multiple(true)
                         .help("template(s) to generate gitignore for i.e Rust, Flutter, VsCode etc."))
                    .arg(Arg::with_name("DESTINATION")
                        .short("d")
                        .long("dest")
                        .help("Destination to store the gitignore file in")
                        .takes_value(true))
                    .subcommand(SubCommand::with_name("list")
                        .about("Lists all available gitignore templates"))
                    .get_matches();
    

    println!("Looking for available templates... üîé", );
    // perform a get request to list the gitignore repository files
    let repo_contents: String = lib::http_get(API_URL);
    let file_map: HashMap<String, String> = lib::build_file_map(&repo_contents);

    // if passed list command, list and return
    if let Some(_) = matches.subcommand_matches("list") {
        for key in file_map.keys() {
            print!("{} \t", key);
        }
        return Ok(());
    }
    
    if matches.is_present("LANGUAGE(S)") {
        let destination: &str = matches.value_of("DESTINATION").unwrap_or("./");

        let languages: Vec<&str> = matches.values_of("LANGUAGE(S)")
                                            .unwrap()
                                            .collect();

        // string to store all the gitignores
        let mut gitignore_template: String = String::new();

        // generate gitignore for each language and append to output string
        for language in languages.iter() {
            println!("Generating .gitignore for {}... üîß", language);
            let ignore_body: String = lib::get_ignore_file(&file_map, language);
            let ignore_template: String = format!("# {} gitignore generated by Blindfold\n\n{}\n\n", language.to_uppercase(), ignore_body);

            gitignore_template.push_str(&ignore_template);
        }
    
        let filepath: PathBuf = Path::new(destination).join(".gitignore");
        
        println!("Writing gitignore to file... ‚úèÔ∏è");
        let mut file = File::create(filepath)?;
        file.write_all(gitignore_template.as_bytes())?;

        println!("Done! ‚ú®");
    }
    else {
        println!("No language supplied as argument, nothing to write! ‚ö†Ô∏è");
    }
    
    return Ok(());
}
