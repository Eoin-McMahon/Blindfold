#[cfg(test)]
mod test {
    use std::collections::HashMap;

    #[test]
    #[should_panic]
    fn http_get() {
        // make sure a valid url does not return nothing
        assert_ne!(blindfold::http_get("https://api.github.com/repos/toptal/gitignore/contents/templates?ref=master"), "");
        // make sure that an invalid url causes an error (ok because the repo url is hardcoded)
        panic!(blindfold::http_get("www.notarealsite/foo/bar"));
    }

    #[test]
    fn generate_gitignore_file() {
        // setup
        let mut map: HashMap<String, String> = HashMap::new(); 
        map.insert(String::from("rust"), String::from("https://raw.githubusercontent.com/toptal/gitignore/master/templates/Rust.gitignore"));
        let langs = vec!["rust"];
        let empty_lang = vec![""];
        let has_empty_lang = vec!["", "rust"];
        
        // add a single language and generate a gitignore for it
        assert_eq!(blindfold::generate_gitignore_file(langs, &map), "# RUST gitignore generated by Blindfold\n\n# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n\n");
        // empty vector should return an empty string
        assert_eq!(blindfold::generate_gitignore_file(empty_lang, &map), "");
        // if there is an empty language, it should return a gitignore for the valid languages
        assert_eq!(blindfold::generate_gitignore_file(has_empty_lang, &map), "# RUST gitignore generated by Blindfold\n\n# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n\n");
    }
    
    #[test]
    fn get_gitignore_file() {
        // setup
        let mut map: HashMap<String, String> = HashMap::new(); 
        map.insert(String::from("rust"), String::from("https://raw.githubusercontent.com/toptal/gitignore/master/templates/Rust.gitignore"));
        let language = "rust";
        
        // get raw gitignore from the github api
        assert_eq!(blindfold::get_ignore_file(&map, language), "# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n");
        // non existent language should return an empty string
        assert_eq!(blindfold::get_ignore_file(&map, ""), "");
    } 

    //fn serializing_the_response() {
        // test an invalid json with serde
        // test valid json 
        //
        // test the creation of the filemap
        // are all other files correctly ignored?
    //}

    //fn creating_the_file() {
        // test the title maker function with another language (maybe chinese to demonstrate uni
        // code)
        // 
    //}

    //fn interface() {
       // test the similarity function
       // make sure it always gives a suggestion even with random characters
       // test with numbers
       // test with only one letter difference
       // make sure if a suggestion is denied, that nothing for it is included in the gitignore
    //}

}
